Session 3-4, Dimensionality Reduction and Derived Attributes (Technical Slides)
========================================================
title : Data Analytics for Business
author : T. Evgeniou, INSEAD



 What is Dimensionality Deduction and Factor Analysis?
========================================================

Derive new  variables which are (linear) combinations of the original ones and capture most of the information in the original data. 

Is often used as a first step in Data Analytics

Can also be used to solve multicollinearity issues in regression

Factor Analysis: Key idea
========================================================


1. Transform the original selected variables into a smaller set of factors

2. Understand the underlying structure of the data and the new factors

3. Use the factors for subsequent analysis


 Key Questions
========================================================

1. Can we really simplify the data by grouping the raw attributes?

2. How many factors should we use?

3. How good are the factors we found?

4. How interpretable and actionable are the factors we found? 

Dimensionality Reduction and Factor Analysis: 6 (Easy) Steps
========================================================

1. Confirm data is metric

2. Scale the  data

3. Check correlations

4. Choose number of factors 

5. Interpret the factors

6. Save factor scores

 Applying Factor Analysis: Evaluating MBA Applications
========================================================


```{r echo=FALSE, message=FALSE, prompt=FALSE, results='asis'}
source("../../AnalyticsLibraries/library.R")
source("../../AnalyticsLibraries/heatmapOutput.R")
# let's make the data into data.matrix classes so that we can easier visualize them
datafile_name="MBAadmin" #  do not add .csv at the end! make sure the data are numeric!!!! check your file!
factor_attributes_used= c(1:7)
factor_selectionciterion = "eigenvalue"
minimum_variance_explained = 65  # between 1 and 100
manual_numb_factors_used = 2
rotation_used="varimax"
MIN_VALUE=0.5
max_data_report = 50 # can also chance in server.R
start_local_webapp <- 1
ProjectData <- read.csv(paste0("data/", datafile_name, ".csv")) # this contains only the matrix ProjectData
ProjectData=data.matrix(ProjectData) 

if (datafile_name == "Boats")
  colnames(ProjectData)<-gsub("\\."," ",colnames(ProjectData))

factor_attributes_used = unique(sapply(factor_attributes_used,function(i) min(ncol(ProjectData), max(i,1))))
ProjectDataFactor=ProjectData[,factor_attributes_used]

Variance_Explained_Table_results<-PCA(ProjectDataFactor, graph=FALSE)
Variance_Explained_Table<-Variance_Explained_Table_results$eig
Variance_Explained_Table_copy<-Variance_Explained_Table
if (factor_selectionciterion == "eigenvalue")
  factors_selected = sum(Variance_Explained_Table_copy[,1] >= 1)
if (factor_selectionciterion == "variance")
  factors_selected = 1:head(which(Variance_Explained_Table_copy[,"cumulative percentage of variance"]>= minimum_variance_explained),1)
if (factor_selectionciterion == "manual")
  factors_selected = manual_numb_factors_used

```


```{r echo=FALSE, message=FALSE, prompt=FALSE, results='asis'}
# let's make the data into data.matrix classes so that we can easier visualize them
ProjectDataFactor = data.matrix(ProjectDataFactor)
ProjectData = data.matrix(ProjectData)
```

Variables available:

* GPA
* GMAT score
* Scholarships, fellowships won
* Evidence of Communications skills 
* Prior Job Experience
* Organizational Experience
* Other extra curricular achievements

Which variables are correlated? What do these variables capture?

 Example Factors
========================================================

<style>
.wrapper{
height: 120%;
width: 900px;
overflow: auto;
}
</style>
<div class="wrapper" style="font-size:20px;">
<div class="row">
<div class="col-md-3">
```{r echo=FALSE, comment=NA, warning=FALSE, message=FALSE,results='asis'}

Rotated_Results<-principal(ProjectDataFactor, nfactors=max(factors_selected), rotate=rotation_used,score=TRUE)
Rotated_Factors<-round(Rotated_Results$loadings,2)
Rotated_Factors<-as.data.frame(unclass(Rotated_Factors))
colnames(Rotated_Factors)<-paste("Component",1:ncol(Rotated_Factors),sep=" ")

sorted_rows <- sort(Rotated_Factors[,1], decreasing = TRUE, index.return = TRUE)$ix
Rotated_Factors <- Rotated_Factors[sorted_rows,]

show_data <- Rotated_Factors 
#show_data = show_data[1:min(max_data_report,nrow(show_data)),]
row<-rownames(show_data)
dfnew<-cbind(row,show_data)
change<-colnames(dfnew)
change[1]<-"Variables"
colnames (dfnew)<-change
m1<-gvisTable(dfnew,options=list(showRowNumber=TRUE,width=1220, height=400,allowHTML=TRUE,page='disable'))
print(m1,'chart')
```
</div>
</div>
</div>

 Step 1: Confirm data is metric
========================================================


<style>
.wrapper{
height: 120%;
width: 900px;
overflow: auto;
}
</style>
<div class="wrapper" style="font-size:20px;">
<div class="row">
<div class="col-md-3">
```{r echo=FALSE, comment=NA, warning=FALSE, message=FALSE,results='asis'}
show_data = data.frame(round(ProjectDataFactor,2))
show_data = show_data[1:min(max_data_report,nrow(show_data)),]
row<-rownames(show_data)
dfnew<-cbind(row,show_data)
change<-colnames(dfnew)
change[1]<-"Variables"
colnames (dfnew)<-change
m1<-gvisTable(dfnew,options=list(showRowNumber=TRUE,width=1220, height=400,allowHTML=TRUE,page='disable'))
print(m1,'chart')
```
</div>
</div>
</div>

Step 2: Scale the  data
========================================================

<style>
.wrapper{
height: 120%;
width: 900px;
overflow: auto;
}
</style>
<div class="wrapper" style="font-size:20px;">
<div class="row">
<div class="col-md-3">
```{r echo=FALSE, comment=NA, warning=FALSE, message=FALSE,results='asis'}
show_data = data.frame(round(my_summary(ProjectDataFactor),2))
#show_data = show_data[1:min(max_data_report,nrow(show_data)),]
row<-rownames(show_data)
dfnew<-cbind(row,show_data)
change<-colnames(dfnew)
change[1]<-"Variables"
colnames (dfnew)<-change
m1<-gvisTable(dfnew,options=list(showRowNumber=TRUE,width=1220, height=400,allowHTML=TRUE,page='disable'))
print(m1,'chart')
```
</div>
</div>
</div>


Data Standardization: Example Code
========================================================

```{r, results='asis'}
ProjectDatafactor_scaled=apply(ProjectDataFactor,2, function(r) {
  if (sd(r)!=0) { 
    res=(r-mean(r))/sd(r) 
    } else { 
      res=0*r; res
      }
  })
```

 Standardized Data: Summary Statistics
========================================================

<style>
.wrapper{
height: 120%;
width: 900px;
overflow: auto;
}
</style>
<div class="wrapper" style="font-size:20px;">
<div class="row">
<div class="col-md-3">
```{r echo=FALSE, comment=NA, warning=FALSE, message=FALSE,results='asis'}
show_data = data.frame(round(my_summary(ProjectDatafactor_scaled),2))
#show_data = show_data[1:min(max_data_report,nrow(show_data)),]
row<-rownames(show_data)
dfnew<-cbind(row,show_data)
change<-colnames(dfnew)
change[1]<-"Variables"
colnames (dfnew)<-change
m1<-gvisTable(dfnew,options=list(showRowNumber=TRUE,width=1220, height=400,allowHTML=TRUE,page='disable'))
print(m1,'chart')
```
</div>
</div>
</div>

 Step 3:  Check correlations 
========================================================

<style>
.wrapper{
height: 120%;
width: 900px;
overflow: auto;
}
</style>
<div class="wrapper" style="font-size:20px;">
<div class="row">
<div class="col-md-3">
```{r echo=FALSE, comment=NA, warning=FALSE, message=FALSE, results='asis'}
thecor = round(cor(ProjectDataFactor),2)
colnames(thecor)<-colnames(thecor)
rownames(thecor)<-rownames(thecor)
## printing the result in a clean-slate table
#cat(renderHeatmapX(thecor, border=1,center = 0,vrange_up = 1, vrange_down = 1))
#cat(renderHeatmapX(thecor, border=1))

show_data = data.frame(round(thecor,2))
m1<-gvisTable(show_data,options=list(width=1920, height=min(400,27*(nrow(show_data)+1)),allowHTML=TRUE))
print(m1,'chart')
```
</div>
</div>
</div>

 Step 4. Choose number of factors 
========================================================

For the method considered here (Principal Component Analysis):
* If there are n variables we will have n factors in total
* First factor will explain most of the variance, second next and so on.

Eigenvalues and Variance Explained by Factors
* each factor will have an associated eigenvalue -  which corresponds to the amount of variance explained by that factor
* with standardized variables each variable has a variance of 1, and the sum of all eigenvalues with n raw attributes is n
* we would like to capture as much of the total variance as possible, while keeping as few factors as possible

 How Many Factors? Eigenvalues and Variance Explained
========================================================


<br>
<style>
.wrapper{
height: 120%;
width: 900px;
overflow: auto;
}
</style>
<div class="wrapper" style="font-size:20px;">
<div class="row">
<div class="col-md-3">
```{r echo=FALSE, comment=NA, warning=FALSE, error=FALSE,message=FALSE,results='asis'}
Variance_Explained_Table_results<-PCA(ProjectDataFactor, graph=FALSE)
Variance_Explained_Table<-Variance_Explained_Table_results$eig
Variance_Explained_Table_copy<-Variance_Explained_Table

row=1:nrow(Variance_Explained_Table)
name<-paste("Component No:",row,sep="")
Variance_Explained_Table<-cbind(name,Variance_Explained_Table)
Variance_Explained_Table<-as.data.frame(Variance_Explained_Table)
colnames(Variance_Explained_Table)<-c("Components", "Eigenvalue", "Percentage_of_explained_variance", "Cumulative_percentage_of_explained_variance")

m<-gvisTable(Variance_Explained_Table,options=list(width=1200, height=400,allowHTML=TRUE,page='disable'),formats=list(Eigenvalue="#.##",Percentage_of_explained_variance="#.##",Cumulative_percentage_of_explained_variance="#.##"))
print(m,'chart')
```
</div>
</div>
</div>

 How Many Factors? Scree Plot
========================================================

```{r Fig1, echo=FALSE, comment=NA, results='asis', message=FALSE, fig.align='center', fig=TRUE}

eigenvalues  <- Variance_Explained_Table[,2]
df           <- cbind(as.data.frame(eigenvalues), c(1:length(eigenvalues)), rep(1, length(eigenvalues)))
colnames(df) <- c("eigenvalues", "components", "abline")
Line         <- gvisLineChart(as.data.frame(df), xvar="components", yvar=c("eigenvalues","abline"), options=list(title='Scree plot', legend="right", width=900, height=500, hAxis="{title:'Number of Components', titleTextStyle:{color:'black'}}", vAxes="[{title:'Eigenvalues'}]",  series="[{color:'green',pointSize:3, targetAxisIndex: 0}]"))
print(Line, 'chart')
```

```{r echo=FALSE, comment=NA, warning=FALSE,message=FALSE,results='asis'}
if (factor_selectionciterion == "eigenvalue")
  factors_selected = sum(Variance_Explained_Table_copy[,1] >= 1)
if (factor_selectionciterion == "variance")
  factors_selected = 1:head(which(Variance_Explained_Table_copy[,"cumulative percentage of variance"]>= minimum_variance_explained),1)
if (factor_selectionciterion == "manual")
  factors_selected = manual_numb_factors_used

```

How many factors?
========================================================

Three criteria to use:

* Eigenvalue > 1
* Cumulative variance explained
* "Elbow" in the Scree plot

Using the `r factor_selectionciterion` criterion we select `r factors_selected` factors. 

 Step 5. Interpret the factors
========================================================

Rotated Selected Factors using the `r rotation_used` rotation.

<style>
.wrapper{
height: 120%;
width: 900px;
overflow: auto;
}
</style>
<div class="wrapper" style="font-size:20px;">
<div class="row">
<div class="col-md-3">
```{r echo=FALSE, comment=NA, warning=FALSE, message=FALSE,results='asis'}
Rotated_Results<-principal(ProjectDataFactor, nfactors=max(factors_selected), rotate=rotation_used,score=TRUE)
Rotated_Factors<-round(Rotated_Results$loadings,2)
Rotated_Factors<-as.data.frame(unclass(Rotated_Factors))
colnames(Rotated_Factors)<-paste("Component",1:ncol(Rotated_Factors),sep=" ")

sorted_rows <- sort(Rotated_Factors[,1], decreasing = TRUE, index.return = TRUE)$ix
Rotated_Factors <- Rotated_Factors[sorted_rows,]

show_data <- Rotated_Factors 
#show_data = show_data[1:min(max_data_report,nrow(show_data)),]
row<-rownames(show_data)
dfnew<-cbind(row,show_data)
change<-colnames(dfnew)
change[1]<-"Variables"
colnames (dfnew)<-change
m1<-gvisTable(dfnew,options=list(showRowNumber=TRUE,width=1220, height=400,allowHTML=TRUE,page='disable'))
print(m1,'chart')
```
</div>
</div>
</div>

 For visualization, let's supress the small numbers...
========================================================

<br>

<style>
.wrapper{
height: 120%;
width: 900px;
overflow: auto;
}
</style>
<div class="wrapper" style="font-size:20px;">
<div class="row">
<div class="col-md-3">
```{r echo=FALSE, comment=NA, warning=FALSE, message=FALSE,results='asis'}
Rotated_Factors_thres <- Rotated_Factors
Rotated_Factors_thres[abs(Rotated_Factors_thres) < MIN_VALUE]<-NA
colnames(Rotated_Factors_thres)<- colnames(Rotated_Factors)
rownames(Rotated_Factors_thres)<- rownames(Rotated_Factors)

show_data <- Rotated_Factors_thres 
#show_data = show_data[1:min(max_data_report,nrow(show_data)),]
row<-rownames(show_data)
dfnew<-cbind(row,show_data)
change<-colnames(dfnew)
change[1]<-"Variables"
colnames (dfnew)<-change
m1<-gvisTable(dfnew,options=list(showRowNumber=TRUE,width=1220, height=400,allowHTML=TRUE,page='disable'))
print(m1,'chart')
```
</div>
</div>
</div>

 What Factor Loads "Look Good"? Three Technical Quality Criteria
========================================================

1. For each factor (column) only a few loadings are large (in absolute value)

2. For each raw attribute (row) only a few loadings are large (in absolute value)

3. Any pair of factors (columns) should have different "patterns" of loading

 Step 6. Save factor scores 
========================================================

<br>

<style>
.wrapper{
height: 120%;
width: 900px;
overflow: auto;
}
</style>
<div class="wrapper" style="font-size:20px;">
<div class="row">
<div class="col-md-3">
```{r echo=FALSE, comment=NA, warning=FALSE, message=FALSE,results='asis'}
NEW_ProjectData <- round(Rotated_Results$scores[,1:factors_selected,drop=F],2)
colnames(NEW_ProjectData)<-paste("Derived Variable (Factor)",1:ncol(NEW_ProjectData),sep=" ")

if (factors_selected >=2){ 
  
  show_data <- as.data.frame(NEW_ProjectData) 
  show_data = show_data[1:min(max_data_report,nrow(show_data)),]
  row<-rownames(show_data)
  dfnew<-cbind(row,show_data)
  change<-colnames(dfnew)
  change[1]<-"Observation"
  colnames (dfnew)<-change
  m1<-gvisTable(dfnew,options=list(showRowNumber=TRUE,width=1220, height=400,allowHTML=TRUE,page='disable'))
  print(m1,'chart')
  
  } else {
    print(xtable(NEW_ProjectData, caption="Only 1 derived variable generated", digits=3), type="html",html.table.attributes="class='table table-striped table-hover table-bordered'", caption.placement="top", comment=FALSE, include.rownames=TRUE, include.colnames=TRUE)
    }
```
</div>
</div>
</div>

Using the Factor Scores: Perceptual Maps
========================================================

```{r Fig2, echo=FALSE, comment=NA, results='asis', message=FALSE, echo=FALSE, fig.align='center', fig=TRUE}

if(ncol(NEW_ProjectData) >= 2) {
  df1  <- cbind(NEW_ProjectData[, 1], NEW_ProjectData[, 2])
  df1  <- as.data.frame(df1)
  sca1 <- gvisScatterChart(df1, options=list(legend="none",
                                             lineWidth=0, pointSize=8, hAxis.title="Derived Variable (Factor) 2",
                                             title="Data Visualization Using the top 2 Derived Attributes (Factors)", vAxis="{title:'Derived Variable (Factor) 1'}",
                                             hAxis="{title:'Derived Variable (Factor) 2'}", width=900, height=500))
  print(sca1,'chart')
  } else {
    df2  <- cbind(NEW_ProjectData[, 1], ProjectData[, 1])
    df2  <- as.data.frame(df2)
    sca2 <- gvisScatterChart(df2, options=list(legend="none",
                                               lineWidth=0, pointSize=12, hAxis.title="Derived Variable (Factor) 1",
                                               title="Only 1 Derived Variable: Using Initial Variable", vAxis="{title:'Derived Variable (Factor) 1'}",
                                               hAxis="{title:'Initial Variable (Factor) 1'}", width=900, height=800))
    print(sca2,'chart')
    }

```

 Factor Analysis: Some (Technical) Concepts 
========================================================

1. Correlation
2. Variance explained (eigenvalues)
3. Scree plot
4. `r rotation_used` rotation
5. Factor Loadings ("components")
6. Factor scores

 Key Questions
========================================================

1. How many factors should we use? Why? Quantitative and Qualitative criteria

2. How can we name and interpret the factors? 

3. What are some issues to consider? 

 Next Class: Cluster Analysis for Segmentation
========================================================

```{r include=FALSE}
## using dummy data to recreate cluster segmentation graphics
library(vegan)
require(vegan)
data(dune)
# kmeans
kclus <- kmeans(dune,centers= 4, iter.max=1000)
# distance matrix
dune_dist <- dist(dune,method="euclidian")
# Multidimensional scaling
cmd <- cmdscale(dune_dist)
```

```{r fig.width=12, fig.height=6, message=FALSE, echo=FALSE, fig.align='center', warning=FALSE, fig=TRUE}
# plot MDS, with colors by groups from kmeans
groups <- levels(factor(kclus$cluster))
ordiplot(cmd, type = "n")
cols <- c("steelblue", "darkred", "darkgreen", "pink")
for(i in seq_along(groups)){
  points(cmd[factor(kclus$cluster) == groups[i], ], col = cols[i], pch = 16)
  }

# add spider and hull
ordispider(cmd, factor(kclus$cluster), label = TRUE)
ordihull(cmd, factor(kclus$cluster), lty = "dotted")
```


